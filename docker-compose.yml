version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: textrover-postgres
    environment:
      POSTGRES_DB: textrover
      POSTGRES_USER: textrover_user
      POSTGRES_PASSWORD: textrover_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U textrover_user -d textrover"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - textrover-network

  # Backend Spring Boot service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: textrover-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - LOGGING_LEVEL_COM_TEXTROVER=INFO
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/textrover
      - SPRING_DATASOURCE_USERNAME=textrover_user
      - SPRING_DATASOURCE_PASSWORD=textrover_pass
    volumes:
      - backend-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - textrover-network

  # Frontend Angular + Nginx service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: textrover-frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - BACKEND_URL=http://backend:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - textrover-network

volumes:
  backend-logs:
    driver: local
  postgres-data:
    driver: local

networks:
  textrover-network:
    driver: bridge
